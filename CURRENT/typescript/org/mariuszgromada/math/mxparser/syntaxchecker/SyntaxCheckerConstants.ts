/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 * @class
 */
export interface SyntaxCheckerConstants {}

export namespace SyntaxCheckerConstants {

    /**
     * End of File.
     */
    export const EOF: number = 0;

    /**
     * RegularExpression Id.
     */
    export const WHITESPACE: number = 5;

    /**
     * RegularExpression Id.
     */
    export const LETTER: number = 6;

    /**
     * RegularExpression Id.
     */
    export const DIGIT: number = 7;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B1: number = 8;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B2: number = 9;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B3: number = 10;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B4: number = 11;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B5: number = 12;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B6: number = 13;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B7: number = 14;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B8: number = 15;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B9: number = 16;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B10: number = 17;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B11: number = 18;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B12: number = 19;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B13: number = 20;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B14: number = 21;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B15: number = 22;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B16: number = 23;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B17: number = 24;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B18: number = 25;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B19: number = 26;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B20: number = 27;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B21: number = 28;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B22: number = 29;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B23: number = 30;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B24: number = 31;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B25: number = 32;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B26: number = 33;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B27: number = 34;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B28: number = 35;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B29: number = 36;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B30: number = 37;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B31: number = 38;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B32: number = 39;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B33: number = 40;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B34: number = 41;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B35: number = 42;

    /**
     * RegularExpression Id.
     */
    export const DIGIT_B36: number = 43;

    /**
     * RegularExpression Id.
     */
    export const LETTERS: number = 44;

    /**
     * RegularExpression Id.
     */
    export const INTEGER: number = 45;

    /**
     * RegularExpression Id.
     */
    export const LEFT_PAR: number = 46;

    /**
     * RegularExpression Id.
     */
    export const RIGHT_PAR: number = 47;

    /**
     * RegularExpression Id.
     */
    export const PLUS: number = 48;

    /**
     * RegularExpression Id.
     */
    export const MINUS: number = 49;

    /**
     * RegularExpression Id.
     */
    export const MULTIPLY: number = 50;

    /**
     * RegularExpression Id.
     */
    export const DIV: number = 51;

    /**
     * RegularExpression Id.
     */
    export const POWER: number = 52;

    /**
     * RegularExpression Id.
     */
    export const TETRATION: number = 53;

    /**
     * RegularExpression Id.
     */
    export const MODULO: number = 54;

    /**
     * RegularExpression Id.
     */
    export const FACTORIAL: number = 55;

    /**
     * RegularExpression Id.
     */
    export const PERCENTAGE: number = 56;

    /**
     * RegularExpression Id.
     */
    export const COMMA: number = 57;

    /**
     * RegularExpression Id.
     */
    export const SEMICOLON: number = 58;

    /**
     * RegularExpression Id.
     */
    export const EQ: number = 59;

    /**
     * RegularExpression Id.
     */
    export const UNIT: number = 60;

    /**
     * RegularExpression Id.
     */
    export const NEQ: number = 61;

    /**
     * RegularExpression Id.
     */
    export const LT: number = 62;

    /**
     * RegularExpression Id.
     */
    export const LEQ: number = 63;

    /**
     * RegularExpression Id.
     */
    export const GT: number = 64;

    /**
     * RegularExpression Id.
     */
    export const GEQ: number = 65;

    /**
     * RegularExpression Id.
     */
    export const OR: number = 66;

    /**
     * RegularExpression Id.
     */
    export const AND: number = 67;

    /**
     * RegularExpression Id.
     */
    export const NOT: number = 68;

    /**
     * RegularExpression Id.
     */
    export const BITNOT: number = 69;

    /**
     * RegularExpression Id.
     */
    export const IMP: number = 70;

    /**
     * RegularExpression Id.
     */
    export const CIMP: number = 71;

    /**
     * RegularExpression Id.
     */
    export const NIMP: number = 72;

    /**
     * RegularExpression Id.
     */
    export const CNIMP: number = 73;

    /**
     * RegularExpression Id.
     */
    export const NAND: number = 74;

    /**
     * RegularExpression Id.
     */
    export const EQV: number = 75;

    /**
     * RegularExpression Id.
     */
    export const NOR: number = 76;

    /**
     * RegularExpression Id.
     */
    export const BITWISE: number = 77;

    /**
     * RegularExpression Id.
     */
    export const XOR: number = 78;

    /**
     * RegularExpression Id.
     */
    export const CHAR: number = 79;

    /**
     * RegularExpression Id.
     */
    export const DEC_FRACT: number = 80;

    /**
     * RegularExpression Id.
     */
    export const DEC_FRACT_OR_INT: number = 81;

    /**
     * RegularExpression Id.
     */
    export const DECIMAL: number = 82;

    /**
     * RegularExpression Id.
     */
    export const BASE1: number = 83;

    /**
     * RegularExpression Id.
     */
    export const BASE2: number = 84;

    /**
     * RegularExpression Id.
     */
    export const BASE3: number = 85;

    /**
     * RegularExpression Id.
     */
    export const BASE4: number = 86;

    /**
     * RegularExpression Id.
     */
    export const BASE5: number = 87;

    /**
     * RegularExpression Id.
     */
    export const BASE6: number = 88;

    /**
     * RegularExpression Id.
     */
    export const BASE7: number = 89;

    /**
     * RegularExpression Id.
     */
    export const BASE8: number = 90;

    /**
     * RegularExpression Id.
     */
    export const BASE9: number = 91;

    /**
     * RegularExpression Id.
     */
    export const BASE10: number = 92;

    /**
     * RegularExpression Id.
     */
    export const BASE11: number = 93;

    /**
     * RegularExpression Id.
     */
    export const BASE12: number = 94;

    /**
     * RegularExpression Id.
     */
    export const BASE13: number = 95;

    /**
     * RegularExpression Id.
     */
    export const BASE14: number = 96;

    /**
     * RegularExpression Id.
     */
    export const BASE15: number = 97;

    /**
     * RegularExpression Id.
     */
    export const BASE16: number = 98;

    /**
     * RegularExpression Id.
     */
    export const BASE17: number = 99;

    /**
     * RegularExpression Id.
     */
    export const BASE18: number = 100;

    /**
     * RegularExpression Id.
     */
    export const BASE19: number = 101;

    /**
     * RegularExpression Id.
     */
    export const BASE20: number = 102;

    /**
     * RegularExpression Id.
     */
    export const BASE21: number = 103;

    /**
     * RegularExpression Id.
     */
    export const BASE22: number = 104;

    /**
     * RegularExpression Id.
     */
    export const BASE23: number = 105;

    /**
     * RegularExpression Id.
     */
    export const BASE24: number = 106;

    /**
     * RegularExpression Id.
     */
    export const BASE25: number = 107;

    /**
     * RegularExpression Id.
     */
    export const BASE26: number = 108;

    /**
     * RegularExpression Id.
     */
    export const BASE27: number = 109;

    /**
     * RegularExpression Id.
     */
    export const BASE28: number = 110;

    /**
     * RegularExpression Id.
     */
    export const BASE29: number = 111;

    /**
     * RegularExpression Id.
     */
    export const BASE30: number = 112;

    /**
     * RegularExpression Id.
     */
    export const BASE31: number = 113;

    /**
     * RegularExpression Id.
     */
    export const BASE32: number = 114;

    /**
     * RegularExpression Id.
     */
    export const BASE33: number = 115;

    /**
     * RegularExpression Id.
     */
    export const BASE34: number = 116;

    /**
     * RegularExpression Id.
     */
    export const BASE35: number = 117;

    /**
     * RegularExpression Id.
     */
    export const BASE36: number = 118;

    /**
     * RegularExpression Id.
     */
    export const BINARY: number = 119;

    /**
     * RegularExpression Id.
     */
    export const OCTAL: number = 120;

    /**
     * RegularExpression Id.
     */
    export const HEXADECIMAL: number = 121;

    /**
     * RegularExpression Id.
     */
    export const FRACTION: number = 122;

    /**
     * RegularExpression Id.
     */
    export const IDENTIFIER: number = 123;

    /**
     * RegularExpression Id.
     */
    export const FUNCTION: number = 124;

    /**
     * RegularExpression Id.
     */
    export const INVALID_TOKEN: number = 127;

    /**
     * RegularExpression Id.
     */
    export const UNEXPECTED_CHAR: number = 128;

    /**
     * Lexical state.
     */
    export const DEFAULT: number = 0;

    /**
     * Literal token values.
     */
    export const tokenImage: string[] = ["<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"", "<WHITESPACE>", "<LETTER>", "<DIGIT>", "\"1\"", "<DIGIT_B2>", "<DIGIT_B3>", "<DIGIT_B4>", "<DIGIT_B5>", "<DIGIT_B6>", "<DIGIT_B7>", "<DIGIT_B8>", "<DIGIT_B9>", "<DIGIT_B10>", "<DIGIT_B11>", "<DIGIT_B12>", "<DIGIT_B13>", "<DIGIT_B14>", "<DIGIT_B15>", "<DIGIT_B16>", "<DIGIT_B17>", "<DIGIT_B18>", "<DIGIT_B19>", "<DIGIT_B20>", "<DIGIT_B21>", "<DIGIT_B22>", "<DIGIT_B23>", "<DIGIT_B24>", "<DIGIT_B25>", "<DIGIT_B26>", "<DIGIT_B27>", "<DIGIT_B28>", "<DIGIT_B29>", "<DIGIT_B30>", "<DIGIT_B31>", "<DIGIT_B32>", "<DIGIT_B33>", "<DIGIT_B34>", "<DIGIT_B35>", "<DIGIT_B36>", "<LETTERS>", "<INTEGER>", "\"(\"", "\")\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"^\"", "\"^^\"", "\"#\"", "\"!\"", "\"%\"", "\",\"", "\";\"", "<EQ>", "<UNIT>", "<NEQ>", "\"<\"", "\"<=\"", "\">\"", "\">=\"", "<OR>", "<AND>", "\"~\"", "\"@~\"", "\"-->\"", "\"<--\"", "\"-/>\"", "\"</-\"", "<NAND>", "\"<->\"", "<NOR>", "<BITWISE>", "\"(+)\"", "<CHAR>", "<DEC_FRACT>", "<DEC_FRACT_OR_INT>", "<DECIMAL>", "<BASE1>", "<BASE2>", "<BASE3>", "<BASE4>", "<BASE5>", "<BASE6>", "<BASE7>", "<BASE8>", "<BASE9>", "<BASE10>", "<BASE11>", "<BASE12>", "<BASE13>", "<BASE14>", "<BASE15>", "<BASE16>", "<BASE17>", "<BASE18>", "<BASE19>", "<BASE20>", "<BASE21>", "<BASE22>", "<BASE23>", "<BASE24>", "<BASE25>", "<BASE26>", "<BASE27>", "<BASE28>", "<BASE29>", "<BASE30>", "<BASE31>", "<BASE32>", "<BASE33>", "<BASE34>", "<BASE35>", "<BASE36>", "<BINARY>", "<OCTAL>", "<HEXADECIMAL>", "<FRACTION>", "<IDENTIFIER>", "<FUNCTION>", "\"[\"", "\"]\"", "<INVALID_TOKEN>", "<UNEXPECTED_CHAR>"];
}